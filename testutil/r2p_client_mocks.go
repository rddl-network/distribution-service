// Code generated by MockGen. DO NOT EDIT.
// Source: /home/employee/go/pkg/mod/github.com/rddl-network/rddl-2-plmnt-service/client@v0.0.1/client.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/rddl-network/rddl-2-plmnt-service/types"
)

// MockIR2PClient is a mock of IR2PClient interface.
type MockIR2PClient struct {
	ctrl     *gomock.Controller
	recorder *MockIR2PClientMockRecorder
}

// MockIR2PClientMockRecorder is the mock recorder for MockIR2PClient.
type MockIR2PClientMockRecorder struct {
	mock *MockIR2PClient
}

// NewMockIR2PClient creates a new mock instance.
func NewMockIR2PClient(ctrl *gomock.Controller) *MockIR2PClient {
	mock := &MockIR2PClient{ctrl: ctrl}
	mock.recorder = &MockIR2PClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIR2PClient) EXPECT() *MockIR2PClientMockRecorder {
	return m.recorder
}

// GetReceiveAddress mocks base method.
func (m *MockIR2PClient) GetReceiveAddress(ctx context.Context, plmntAddress string) (types.ReceiveAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiveAddress", ctx, plmntAddress)
	ret0, _ := ret[0].(types.ReceiveAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiveAddress indicates an expected call of GetReceiveAddress.
func (mr *MockIR2PClientMockRecorder) GetReceiveAddress(ctx, plmntAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiveAddress", reflect.TypeOf((*MockIR2PClient)(nil).GetReceiveAddress), ctx, plmntAddress)
}
